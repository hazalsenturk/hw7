package edu.usfca.cs;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;
/**
 * LibraryTest is the class to test methods in the Library class
 * Generated by jUnit
 * <p>
 * @author      Gizem Hazal Senturk
 * @since       1.0
 */
class LibraryTest {

    Library lib1, lib2;
    Song s1,s2,s3,s4, s5, s6,s7, s8, s9, s10,s11;

    @BeforeEach
    void setup() {
        lib1 = new Library();
        lib2 = new Library();

        s1 = new Song("Song 1",40, "Album 1", "artist1", true,  "jazz");
        s2 = new Song("Song 2", 339, "Album 2", "artist2", false,"jazz");
        s3 = new Song("Song 3",40, "Album 3", "artist3", true , "pop");
        s4 = new Song("Song 4", 339,"Album 4", "artist4", true , "rock");
        s5 = new Song("Song 5",40,"Album 5", "artist5", true ,"jazz");
        s6 = new Song("Song 6", 339, "Album 6", "artist6", true ,"jazz");
        s7 = new Song("Song 7",40, "Album 7", "artist7", false, "r&b");
        s8 = new Song("Song 8", 339, "Album 8", "artist8", false ,"jazz");

        // Songs to test duplicates and addition
        s9 = new Song("Song 1", 40, "Album 1", "Artist 1", true);
        s10 = new Song("Song 10", 40, "Album 1", "artist10" , true);
        s11 = new Song("Song 11", 40, "Album 11", "Artist 11", true);

        lib1.addSongs(s1);
        lib1.addSongs(s2);
        lib1.addSongs(s3);
        lib1.addSongs(s4);
        lib1.addSongs(s5);
        lib1.addSongs(s6);
        lib1.addSongs(s7);
        lib1.addSongs(s8);
        lib1.addSongs(s9);
        lib1.addSongs(s10);

    }

    @Test
    void addAlbums() {
        Album a1 = new Album("alb1","art1" );
        lib1.addAlbums(a1);
        assertEquals(lib1.getAlbums().size(),11);
    }

    @Test
    void addArtist() {
        Artist a1 = new Artist("art1");
        lib2.addArtist(a1);
        assertEquals(lib2.getArtists().size(),1);
    }

    @Test
    void addSongs() {
        lib1.addSongs(s11);
        assertTrue(lib1.getSongs().contains(s11));
    }


    @Test
    void checkDup() {
        assertTrue(lib1.checkDup(s9));
    }

    @Test
    void duplicates() {
        lib1.duplicates();
        int counter = 0;
        for(Song s: lib1.getSongs()){
            Boolean b = lib1.checkDup(s);
            if(b==false){counter++;}
        }
        assertTrue(counter==0);

    }

    @Test
    void findSongs() {

        assertTrue(lib1.findSongs(s9));
    }

    @Test
    void writeXML() {
        lib1.writeXML();
    }

    @Test
    void writeJSON() {
        lib1.writeJSON();
    }
}